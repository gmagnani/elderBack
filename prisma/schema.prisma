// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Elderly {
  id             String           @id @default(uuid())
  cpf            String           @unique
  name           String
  email          String           @default("")
  dateOfBirth    DateTime
  phone          String
  contacts       ElderlyContact[] // Se Elderly for deletado, ElderlyContact é deletado (veja ElderlyContact.elderlyId)
  address        Address          @relation(fields: [addressId], references: [id]) // Se Address for deletado, Elderly com esse addressId não pode existir (Restrict por padrão, OK)
  addressId      String
  sex            String
  weight         Float
  height         Float
  imc            Float
  education      String
  socialeconomic String
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade) // Se User for deletado, Elderly associado é deletado
  userId         String           @unique
  created        DateTime         @default(now())
  updated        DateTime         @updatedAt
  FormAnsware    FormAnsware[] // Se Elderly for deletado, FormAnsware é deletado (veja FormAnsware.elderlyId)
}

model Address {
  id           String    @id @default(uuid())
  street       String
  number       String
  complement   String?
  neighborhood String
  city         String
  state        String
  zipCode      String
  Elderly      Elderly[] // Se um Endereço for deletado, o default é Restrict, o que é bom.
  Contact      Contact[] // Se um Endereço for deletado, o default é Restrict.
  created      DateTime  @default(now())
  updated      DateTime  @updatedAt
}

model Contact {
  id        String           @id @default(uuid())
  name      String
  phone     String
  email     String
  cpf       String           @unique
  address   Address          @relation(fields: [addressId], references: [id]) // Se Address for deletado, Contact com esse addressId não pode existir (Restrict por padrão, OK)
  addressId String
  elderly   ElderlyContact[] // Se Contact for deletado, ElderlyContact é deletado (veja ElderlyContact.contactId)
  created   DateTime         @default(now())
  updated   DateTime         @updatedAt
}

model ElderlyContact {
  elderlyId String
  contactId String
  elderly   Elderly @relation(fields: [elderlyId], references: [id], onDelete: Cascade) // Se Elderly for deletado, esta entrada de junção é deletada
  contact   Contact @relation(fields: [contactId], references: [id], onDelete: Cascade) // Se Contact for deletado, esta entrada de junção é deletada

  @@id([elderlyId, contactId])
}

model Professional {
  id          String        @id @default(uuid())
  cpf         String        @unique
  name        String
  phone       String
  email       String
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade) // Se User for deletado, Professional associado é deletado
  userId      String        @unique
  created     DateTime      @default(now())
  updated     DateTime      @updatedAt
  FormAnsware FormAnsware[] // Se Professional for deletado, FormAnsware é deletado (veja FormAnsware.techProfessionalId)
}

model Question {
  id             String                 @id @default(uuid())
  title          String
  description    String?
  type           QuestionType
  created        DateTime               @default(now())
  updated        DateTime               @updatedAt
  options        Option[] // Se Question for deletada, suas Options são deletadas (veja Option.questionId)
  ruleId         String?
  rule           Rule?                  @relation(fields: [ruleId], references: [id], onDelete: Cascade) // Se Rule for deletada, esta Question é deletada (conforme seu schema original)
  formRel        Form_has_Question[] // Se Question for deletada, suas relações com Form são deletadas (veja Form_has_Question.questionId)
  seccionRel     Seccion_has_Question[] // Se Question for deletada, suas relações com Seccion são deletadas (veja Seccion_has_Question.questionId)
  QuestionAnswer QuestionAnswer[] // Se Question for deletada, suas QuestionAnswers são deletadas (veja QuestionAnswer.questionId)
}

model Option {
  id             String           @id @default(uuid())
  description    String?
  score          Int
  question       Question         @relation(fields: [questionId], references: [id], onDelete: Cascade) // Se Question for deletada, esta Option é deletada
  questionId     String
  created        DateTime         @default(now())
  updated        DateTime         @updatedAt
  OptionAnswer   OptionAnswer[] // Se Option for deletada, suas OptionAnswers são deletadas (veja OptionAnswer.optionId)
  QuestionAnswer QuestionAnswer[] // Se Option for deletada, QuestionAnswer.selectedOptionId se tornará null (onDelete: SetNull por padrão para campos opcionais)
}

model OptionAnswer {
  id               String         @id @default(uuid())
  score            Int
  answerText       String?
  answerNumber     Float?
  answerBoolean    Boolean?
  option           Option         @relation(fields: [optionId], references: [id], onDelete: Cascade) // Se Option for deletada, esta OptionAnswer é deletada
  optionId         String
  questionAnswer   QuestionAnswer @relation(fields: [questionAnswerId], references: [id], onDelete: Cascade) // Se QuestionAnswer for deletada, esta OptionAnswer é deletada
  questionAnswerId String
  created          DateTime       @default(now())
  updated          DateTime       @updatedAt
}

model QuestionAnswer {
  id               String         @id @default(uuid())
  question         Question       @relation(fields: [questionId], references: [id], onDelete: Cascade) // Se Question for deletada, esta QuestionAnswer é deletada
  questionId       String
  formAnsware      FormAnsware    @relation(fields: [formAnswareId], references: [id], onDelete: Cascade) // Se FormAnsware for deletado, esta QuestionAnswer é deletada
  formAnswareId    String
  answerText       String?
  answerNumber     Float?
  answerImage      String?
  answerBoolean    Boolean?
  selectedOptionId String?
  selectedOption   Option?        @relation(fields: [selectedOptionId], references: [id], onDelete: SetNull) // Se Option for deletada, selectedOptionId se torna null
  score            Int?
  created          DateTime       @default(now())
  updated          DateTime       @updatedAt
  optionAnswers    OptionAnswer[] // Se QuestionAnswer for deletada, suas OptionAnswers são deletadas (veja OptionAnswer.questionAnswerId)
}

model User {
  id                 String        @id @default(uuid())
  login              String        @unique
  name               String?
  email              String        @default("")
  password           String
  userType           UserType      @default(USER)
  resetToken         String?
  resetTokenExpiry   DateTime?
  mustChangePassword Boolean       @default(true)
  created            DateTime      @default(now())
  updated            DateTime      @updatedAt
  elderly            Elderly? // Se User for deletado, Elderly associado é deletado (veja Elderly.userId)
  professional       Professional? // Se User for deletado, Professional associado é deletado (veja Professional.userId)
}

enum UserType {
  ADMIN
  USER
  TECH_PROFESSIONAL
}

enum EvaluationAnswareStatus {
  IN_PROGRESS
  PAUSED
  COMPLETED
  CANCELLED
}

enum QuestionType {
  TEXT
  NUMBER
  IMAGE
  SELECT
  MULTISELECT
  BOOLEAN
}

enum RuleType {
  CONDITIONAL
  SUM
  ARITHMETIC
}

model Form {
  id                  String                @id @default(uuid())
  title               String
  type                String?
  description         String?
  seccions            Seccion[] // Se Form for deletado, suas Seccions são deletadas (veja Seccion.formId)
  questionsRel        Form_has_Question[] // Se Form for deletado, suas relações Form_has_Question são deletadas (veja Form_has_Question.formId)
  FormAnsware         FormAnsware[] // Por padrão, deletar um Form não deleta FormAnsware (Restrict). Isso é geralmente bom para manter o histórico de respostas. Se quiser deletar, adicione onDelete: Cascade em FormAnsware.formId
  Evaluation_has_Form Evaluation_has_Form[] // Se Form for deletado, suas relações Evaluation_has_Form são deletadas (veja Evaluation_has_Form.formId)
  ruleId              String?
  rule                Rule?                 @relation(fields: [ruleId], references: [id], onDelete: SetNull) // Se Rule for deletada, form.ruleId se torna null
  created             DateTime              @default(now())
  updated             DateTime              @updatedAt
}

model Form_has_Question {
  formId     String
  questionId String
  index      Int
  form       Form     @relation(fields: [formId], references: [id], onDelete: Cascade) // Se Form for deletado, esta entrada de junção é deletada
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade) // Se Question for deletada, esta entrada de junção é deletada

  @@id([formId, questionId])
}

model Seccion {
  id           String                 @id @default(uuid())
  title        String
  ruleId       String?
  formId       String
  rule         Rule?                  @relation(fields: [ruleId], references: [id], onDelete: SetNull) // Se Rule for deletada, seccion.ruleId se torna null
  form         Form                   @relation(fields: [formId], references: [id], onDelete: Cascade) // Se Form for deletado, esta Seccion é deletada
  questionsRel Seccion_has_Question[] // Se Seccion for deletada, suas relações Seccion_has_Question são deletadas (veja Seccion_has_Question.seccionId)
  created      DateTime               @default(now())
  updated      DateTime               @updatedAt
}

model Seccion_has_Question {
  seccionId  String
  questionId String
  seccion    Seccion  @relation(fields: [seccionId], references: [id], onDelete: Cascade) // Se Seccion for deletada, esta entrada de junção é deletada
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade) // Se Question for deletada, esta entrada de junção é deletada

  @@id([seccionId, questionId])
}

model Rule {
  id         String     @id @default(uuid())
  type       RuleType
  maxScore   Int?
  value1Type String?
  value2Type String?
  value1     Int?
  value2     Int?
  condition  String?
  operation  String?
  seccions   Seccion[] // Se Rule for deletada, Seccion.ruleId se torna null (onDelete: SetNull em Seccion.rule)
  questions  Question[] // Se Rule for deletada, Question.ruleId é tratado conforme definido em Question.rule (Cascade no seu caso)
  created    DateTime   @default(now())
  updated    DateTime   @updatedAt
  Form       Form[] // Se Rule for deletada, Form.ruleId se torna null (onDelete: SetNull em Form.rule)
}

model FormAnsware {
  id                  String            @id @default(uuid())
  totalScore          Float?
  formId              String
  elderlyId           String
  techProfessionalId  String
  evaluationAnswareId String
  evaluationAnsware   EvaluationAnsware @relation(fields: [evaluationAnswareId], references: [id], onDelete: Cascade) // Se EvaluationAnsware for deletada, este FormAnsware é deletado
  form                Form              @relation(fields: [formId], references: [id]) // Restrict por padrão. Deletar o Form template não deleta as respostas.
  idoso               Elderly           @relation(fields: [elderlyId], references: [id], onDelete: Cascade) // Se Elderly for deletado, este FormAnsware é deletado
  professional        Professional      @relation(fields: [techProfessionalId], references: [id], onDelete: Cascade) // Se Professional for deletado, este FormAnsware é deletado
  questionsAnswares   QuestionAnswer[] // Se FormAnsware for deletado, suas QuestionAnswers são deletadas (veja QuestionAnswer.formAnswareId)
  created             DateTime          @default(now())
  updated             DateTime          @updatedAt

  @@unique([evaluationAnswareId, formId])
}

model Evaluation {
  id                String                @id @default(uuid())
  title             String
  description       String?
  formsRel          Evaluation_has_Form[] // Se Evaluation for deletada, suas relações Evaluation_has_Form são deletadas (veja Evaluation_has_Form.evaluationId)
  created           DateTime              @default(now())
  updated           DateTime              @updatedAt
  EvaluationAnsware EvaluationAnsware[] // Por padrão, deletar uma Evaluation não deleta EvaluationAnsware (Restrict). Bom para manter histórico. Se quiser deletar, adicione onDelete: Cascade em EvaluationAnsware.evaluationId
}

model Evaluation_has_Form {
  evaluationId String
  formId       String
  order        Int
  evaluation   Evaluation @relation(fields: [evaluationId], references: [id], onDelete: Cascade) // Se Evaluation for deletada, esta entrada de junção é deletada
  form         Form       @relation(fields: [formId], references: [id], onDelete: Cascade) // Se Form for deletado, esta entrada de junção é deletada

  @@id([evaluationId, formId])
}

model EvaluationAnsware {
  id           String                  @id @default(uuid())
  evaluationId String
  startedAt    DateTime                @default(now())
  completedAt  DateTime?
  status       EvaluationAnswareStatus @default(IN_PROGRESS)
  scoreTotal   Float?
  evaluation   Evaluation              @relation(fields: [evaluationId], references: [id]) // Restrict por padrão. Deletar o Evaluation template não deleta as respostas.
  formAnswares FormAnsware[] // Se EvaluationAnsware for deletada, seus FormAnswares são deletados (veja FormAnsware.evaluationAnswareId)
  created      DateTime                @default(now())
  updated      DateTime                @updatedAt
}
