// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Elderly {
  id                String              @id @default(uuid())
  cpf               String              @unique
  name              String
  email             String              @default("")
  dateOfBirth       DateTime
  phone             String
  contacts          ElderlyContact[]
  address           Address             @relation(fields: [addressId], references: [id])
  addressId         String
  sex               String
  weight            Float
  height            Float
  imc               Float
  education         String
  socialeconomic    String
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String              @unique
  created           DateTime            @default(now())
  updated           DateTime            @updatedAt
  FormAnsware       FormAnsware[]
  EvaluationAnsware EvaluationAnsware[]
}

model Address {
  id           String    @id @default(uuid())
  street       String
  number       String
  complement   String?
  neighborhood String
  city         String
  state        String
  zipCode      String
  Elderly      Elderly[]
  Contact      Contact[]
  created      DateTime  @default(now())
  updated      DateTime  @updatedAt
}

model Contact {
  id        String           @id @default(uuid())
  name      String
  phone     String
  email     String
  cpf       String           @unique
  address   Address          @relation(fields: [addressId], references: [id])
  addressId String
  elderly   ElderlyContact[]
  created   DateTime         @default(now())
  updated   DateTime         @updatedAt
}

model ElderlyContact {
  elderlyId String
  contactId String
  elderly   Elderly @relation(fields: [elderlyId], references: [id], onDelete: Cascade)
  contact   Contact @relation(fields: [contactId], references: [id], onDelete: Cascade)

  @@id([elderlyId, contactId])
}

model Professional {
  id          String        @id @default(uuid())
  cpf         String        @unique
  name        String
  phone       String
  email       String
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String        @unique
  created     DateTime      @default(now())
  updated     DateTime      @updatedAt
  FormAnsware FormAnsware[]
}

model Question {
  id             String                 @id @default(uuid())
  title          String
  description    String?
  type           QuestionType
  created        DateTime               @default(now())
  updated        DateTime               @updatedAt
  options        Option[]
  ruleId         String?
  rule           Rule?                  @relation(fields: [ruleId], references: [id], onDelete: Cascade)
  formRel        Form_has_Question[]
  seccionRel     Seccion_has_Question[]
  QuestionAnswer QuestionAnswer[]
}

model Option {
  id             String           @id @default(uuid())
  description    String?
  score          Int
  question       Question         @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId     String
  created        DateTime         @default(now())
  updated        DateTime         @updatedAt
  OptionAnswer   OptionAnswer[]
  QuestionAnswer QuestionAnswer[]
}

model OptionAnswer {
  id               String         @id @default(uuid())
  score            Int
  answerText       String?
  answerNumber     Float?
  answerBoolean    Boolean?
  option           Option         @relation(fields: [optionId], references: [id], onDelete: Cascade)
  optionId         String
  questionAnswer   QuestionAnswer @relation(fields: [questionAnswerId], references: [id], onDelete: Cascade)
  questionAnswerId String
  created          DateTime       @default(now())
  updated          DateTime       @updatedAt
}

model QuestionAnswer {
  id               String         @id @default(uuid())
  question         Question       @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId       String
  formAnsware      FormAnsware    @relation(fields: [formAnswareId], references: [id], onDelete: Cascade)
  formAnswareId    String
  answerText       String?
  answerNumber     Float?
  answerImage      String?
  answerBoolean    Boolean?
  selectedOptionId String?
  selectedOption   Option?        @relation(fields: [selectedOptionId], references: [id], onDelete: SetNull)
  score            Int?
  created          DateTime       @default(now())
  updated          DateTime       @updatedAt
  optionAnswers    OptionAnswer[]
}

model User {
  id                 String        @id @default(uuid())
  login              String        @unique
  name               String?
  email              String        @default("")
  password           String
  userType           UserType      @default(USER)
  resetToken         String?
  resetTokenExpiry   DateTime?
  mustChangePassword Boolean       @default(true)
  created            DateTime      @default(now())
  updated            DateTime      @updatedAt
  elderly            Elderly?
  professional       Professional?
}

enum UserType {
  ADMIN
  USER
  TECH_PROFESSIONAL
}

enum EvaluationAnswareStatus {
  IN_PROGRESS
  PAUSED
  COMPLETED
  CANCELLED
}

enum QuestionType {
  TEXT
  NUMBER
  IMAGE
  SELECT
  MULTISELECT
  BOOLEAN
  SCORE
}

enum RuleType {
  CONDITIONAL
  SUM
  ARITHMETIC
}

model Form {
  id                  String                @id @default(uuid())
  title               String
  type                String?
  description         String?
  seccions            Seccion[]
  questionsRel        Form_has_Question[]
  FormAnsware         FormAnsware[]
  Evaluation_has_Form Evaluation_has_Form[]
  ruleId              String?
  rule                Rule?                 @relation(fields: [ruleId], references: [id], onDelete: SetNull)
  created             DateTime              @default(now())
  updated             DateTime              @updatedAt
}

model Form_has_Question {
  formId     String
  questionId String
  index      Int
  form       Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@id([formId, questionId])
}

model Seccion {
  id           String                 @id @default(uuid())
  title        String
  ruleId       String?
  formId       String
  rule         Rule?                  @relation(fields: [ruleId], references: [id], onDelete: SetNull)
  form         Form                   @relation(fields: [formId], references: [id], onDelete: Cascade)
  questionsRel Seccion_has_Question[]
  created      DateTime               @default(now())
  updated      DateTime               @updatedAt
}

model Seccion_has_Question {
  seccionId  String
  questionId String
  seccion    Seccion  @relation(fields: [seccionId], references: [id], onDelete: Cascade)
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@id([seccionId, questionId])
}

model Rule {
  id          String     @id @default(uuid())
  type        RuleType?
  maxScore    Int?
  value1Type  String?
  value2Type  String?
  value1      Int?
  value2      Int?
  // Armazena a expressão que a RuleEngine irá executar
  expression  String?
  // Armazena uma descrição amigável da regra para exibição
  description String?
  // Usado para definir a ordem de execução de múltiplas regras
  priority    Int        @default(0)
  condition   String?
  operation   String?
  seccions    Seccion[]
  questions   Question[]
  created     DateTime   @default(now())
  updated     DateTime   @updatedAt
  Form        Form[]
}

model FormAnsware {
  id                  String            @id @default(uuid())
  totalScore          Float?
  formId              String
  elderlyId           String
  techProfessionalId  String
  evaluationAnswareId String
  evaluationAnsware   EvaluationAnsware @relation(fields: [evaluationAnswareId], references: [id], onDelete: Cascade)
  form                Form              @relation(fields: [formId], references: [id])
  idoso               Elderly           @relation(fields: [elderlyId], references: [id], onDelete: Cascade)
  professional        Professional      @relation(fields: [techProfessionalId], references: [id], onDelete: Cascade)
  questionsAnswares   QuestionAnswer[]
  created             DateTime          @default(now())
  updated             DateTime          @updatedAt

  @@unique([evaluationAnswareId, formId])
}

model Evaluation {
  id                String                @id @default(uuid())
  title             String
  description       String?
  formsRel          Evaluation_has_Form[]
  created           DateTime              @default(now())
  updated           DateTime              @updatedAt
  EvaluationAnsware EvaluationAnsware[]
}

model Evaluation_has_Form {
  evaluationId String
  formId       String
  order        Int
  evaluation   Evaluation @relation(fields: [evaluationId], references: [id], onDelete: Cascade)
  form         Form       @relation(fields: [formId], references: [id], onDelete: Cascade)

  @@id([evaluationId, formId])
}

model EvaluationAnsware {
  id           String                  @id @default(uuid())
  evaluationId String
  startedAt    DateTime                @default(now())
  completedAt  DateTime?
  status       EvaluationAnswareStatus @default(IN_PROGRESS)
  elderlyId    String
  elderly      Elderly                 @relation(fields: [elderlyId], references: [id], onDelete: Cascade)
  evaluation   Evaluation              @relation(fields: [evaluationId], references: [id])
  formAnswares FormAnsware[]
  created      DateTime                @default(now())
  updated      DateTime                @updatedAt
}
